Microsoft (R) Macro Assembler Version 14.13.26129.0	    05/24/18 22:24:20
(FailedArraySort    (FailedArraySort.asm		     Page 1 - 1


				TITLE FailedArraySort    (FailedArraySort.asm)

				; Author: Chasen Yamashita
				; Last Modified:	5/23/18
				; OSU email address: yamashch@oregonstate.eduh
				; Course number/section: CS271-400
				; Project Number: 5                 Due Date: 5/27/18
				; Description: It's SUPPOSED to sort the array through selection sort, but I am unsure if I am switching elements incorrectly or iterating
				;				through the array wrong. And I have no clue why the median only prints 0 when the array clearly has contents, what
				;				a conundrum
				;

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000A			MIN				equ		10
 = 000000C8			MAX				equ		200
 = 00000064			LO				equ		100
 = 000003E7			HI				equ		999

 00000000			.data

 00000000 4E 61 6D 65 3A	MyName		BYTE	"Name: Chasen Yamashita ",0
	   20 43 68 61 73
	   65 6E 20 59 61
	   6D 61 73 68 69
	   74 61 20 00
 00000018 50 72 6F 67 72	ProgTitle	BYTE	"Program Title: Random Number Array",0
	   61 6D 20 54 69
	   74 6C 65 3A 20
	   52 61 6E 64 6F
	   6D 20 4E 75 6D
	   62 65 72 20 41
	   72 72 61 79 00

 0000003B 49 6E 70 75 74	instruct1	BYTE	"Input a number 10 to 200 (inclusive) to generate pseudo-random numbers: ",0
	   20 61 20 6E 75
	   6D 62 65 72 20
	   31 30 20 74 6F
	   20 32 30 30 20
	   28 69 6E 63 6C
	   75 73 69 76 65
	   29 20 74 6F 20
	   67 65 6E 65 72
	   61 74 65 20 70
	   73 65 75 64 6F
	   2D 72 61 6E 64
	   6F 6D 20 6E 75
	   6D 62 65 72 73
	   3A 20 00
 00000084 45 52 52 4F 52	warning		BYTE	"ERROR: Number must be from 10 to 200, and positive.",0
	   3A 20 4E 75 6D
	   62 65 72 20 6D
	   75 73 74 20 62
	   65 20 66 72 6F
	   6D 20 31 30 20
	   74 6F 20 32 30
	   30 2C 20 61 6E
	   64 20 70 6F 73
	   69 74 69 76 65
	   2E 00
 000000B8 54 68 65 20 75	Unsorted	BYTE	"The unsorted random number array: ",0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 20 61 72 72
	   61 79 3A 20 00
 000000DB 54 68 65 20 73	Sorted		BYTE	"The sorted number list: ",0
	   6F 72 74 65 64
	   20 6E 75 6D 62
	   65 72 20 6C 69
	   73 74 3A 20 00
 000000F4 54 68 65 20 6D	Median		BYTE	"The median of the list is: ",0
	   65 64 69 61 6E
	   20 6F 66 20 74
	   68 65 20 6C 69
	   73 74 20 69 73
	   3A 20 00

 00000110 00000000		request		DWORD	?						; user's input
 00000114  000000C8 [		array		DWORD	200 DUP(?)				; array to store random integers
	    00000000
	   ]
 00000434 00000000		lineCount	DWORD	0						; counts lines for printing

 00000000			.code
 00000000			main PROC

 00000000  E8 00000000 E	call	Randomize		; unique seed based on time

 00000005  E8 0000006B		call	introduction

 0000000A  68 00000110 R	push	OFFSET request
 0000000F  E8 00000080		call	GetUserData			

 00000014  FF 35 00000110 R	push	request
 0000001A  68 00000114 R	push	OFFSET array
 0000001F  E8 000000AD		call	FillArray

 00000024  68 00000114 R	push	OFFSET array
 00000029  FF 35 00000110 R	push	request
 0000002F  68 000000B8 R	push	OFFSET Unsorted
 00000034  E8 00000140		call	PrintArray

 00000039  68 00000114 R	push	OFFSET array
 0000003E  FF 35 00000110 R	push	request
 00000044  E8 000000AD		call	SortList

 00000049  68 00000114 R	push	OFFSET array
 0000004E  FF 35 00000110 R	push	request
 00000054  68 000000DB R	push	OFFSET Sorted
 00000059  E8 0000011B		call	PrintArray

 0000005E  FF 35 00000110 R	push	request
 00000064  68 00000114 R	push	OFFSET array
 00000069  E8 000000D3		call	PrintMedian

					exit	; exit to operating system
 0000006E  6A 00	   *	    push   +000000000h
 00000070  E8 00000000 E   *	    call   ExitProcess
 00000075			main ENDP


				;---------------------------------------------------------
 00000075			introduction PROC
				;
				; Introduces program and programmer name. 
				; Parameters: N/A
				; Returns: N/A
				; Preconditions: MyName, ProgTitle
				;---------------------------------------------------------


 00000075  BA 00000000 R		mov		edx, OFFSET MyName
 0000007A  E8 00000000 E		call	WriteString
 0000007F  E8 00000000 E		call	CrLf

 00000084  BA 00000018 R		mov		edx, OFFSET ProgTitle
 00000089  E8 00000000 E		call	WriteString
 0000008E  E8 00000000 E		call	CrLf

 00000093  C3				ret
 00000094			introduction ENDP

				;---------------------------------------------------------
 00000094			GetUserData PROC
				;
				; Introduces program and programmer name. 
				; Parameters: request's address
				; Returns: request with user value.
				; Preconditions: N/A
				;---------------------------------------------------------

 00000094  55				push	ebp
 00000095  8B EC			mov		ebp, esp

 00000097			GetInput:

 00000097  BA 0000003B R		mov		edx, OFFSET instruct1
 0000009C  E8 00000000 E		call	WriteString

 000000A1  E8 00000000 E		call	ReadDec		
 000000A6  E8 00000000 E		call	CrLf

 000000AB  83 F8 0A			cmp		eax, MIN			;Validation if input is less than MIN
 000000AE  7C 10			jl		error

 000000B0  3D 000000C8			cmp		eax, MAX			;Validation if input > MAX
 000000B5  7F 09			jg		error

 000000B7  8B 5D 08			mov		ebx, [ebp+8]		;Address of request in ebx
 000000BA  89 03			mov		[ebx], eax			;Stores user's value in request.

 000000BC  5D				pop		ebp					;restores ebp

 000000BD  C2 0004			ret		4					;pops the pushed request address

 000000C0			error:
 000000C0  BA 00000084 R		mov		edx, OFFSET warning				; Gives warning
 000000C5  E8 00000000 E		call	WriteString
 000000CA  E8 00000000 E		call	CrLf
 000000CF  EB C6			jmp	GetInput

 000000D1			GetUserData ENDP

				;---------------------------------------------------------
 000000D1			FillArray PROC
				;
				; Fills array with pseudo random numbers. 
				; Parameters: request (value), and address of array.
				; Returns: array initialised and given data.
				; Preconditions: N/A
				;
				; Lecture 20 is used as a reference for this portion of code.
				;---------------------------------------------------------

 000000D1  55				push	ebp
 000000D2  8B EC			mov		ebp, esp

 000000D4  8B 75 08			mov		esi, [ebp+8]		; +4 is return address, and +8 is @list. +12 is request.
 000000D7  8B 4D 0C			mov		ecx, [ebp+12]		; loop counter request.

 000000DA			AddElement:

 000000DA  B8 000003E7			mov		eax, HI
 000000DF  40				inc		eax
 000000E0  83 E8 64			sub		eax, LO
 000000E3  E8 00000000 E		call	RandomRange			; Generates random number within range of HI - LO + 1, or 100 to 999. 

 000000E8  83 C0 64			add		eax, LO

 000000EB  89 06			mov		[esi], eax
 000000ED  83 C6 04			add		esi, 4				;Moves to next array node
 000000F0  E2 E8			loop	AddElement

 000000F2  5D				pop		ebp
 000000F3  C2 0008			ret		8
 000000F6			FillArray ENDP

				;---------------------------------------------------------
 000000F6			SortList PROC
				;
				; Uses Selection sort, comparing each int to each other and swapping if one is greater.
				; Parameters: @array (+12), request (+8)
				; Returns: Sorted elements for @array
				; Preconditions: Array contains < 10 elements.
				;---------------------------------------------------------
					
 000000F6  55				push	ebp
 000000F7  8B EC			mov		ebp, esp

 000000F9  8B 4D 08			mov		ecx, [ebp+8]		; Set outer loop counter, decrement
 000000FC  49				dec		ecx

 000000FD  8B 5D 0C			mov		ebx, [ebp+12]		; ebx holds array pointer
 00000100  8B D1			mov		edx, ecx		; holds request value, for inner loop counter

 00000102			OuterLoop:
					
 00000102  8B 7D 0C			mov		edi, [ebp+12]
 00000105  8B 75 0C			mov		esi, [ebp+12]				
 00000108  83 C6 04			add		esi, 4				; Should be +4 for each DWORD element of the array...
 0000010B  51				push	ecx
 0000010C  8B CA			mov		ecx, edx			; inner loop counter started

 0000010E			InnerLoop:

 0000010E  8B 06			mov		eax, [esi]
 00000110  3B 07			cmp		eax, [edi]

 00000112  7F 07			jg		NoSwitch

 00000114  57				push	edi				; Pass addresses of node to be switched
 00000115  56				push	esi				

 00000116  E8 0000000F			call	SwitchElements

 0000011B			NoSwitch:

 0000011B  83 C6 04			add		esi, 4
 0000011E  83 C7 04			add		edi, 4
					
 00000121  E2 EB			loop	InnerLoop
 00000123  59				pop		ecx
 00000124  E2 DC			loop	OuterLoop

 00000126  5D				pop		ebp
 00000127  C2 0008			ret		8
 0000012A			SortList ENDP

				;---------------------------------------------------------
 0000012A			SwitchElements PROC
				;
				; 
				; Parameters: esi, and edi addresses, esi being the array with a greater index.
				;		ebp is +4, esi +8, edi +12, another push makes each +4 more?
				; Returns: 
				; Preconditions: N/A
				;---------------------------------------------------------

 0000012A  55				push	ebp
 0000012B  8B EC			mov		ebp, esp

 0000012D  8B 75 08			mov		esi, [ebp+8]			;attempts to switch
 00000130  8B 7D 0C			mov		edi, [ebp+12]
 00000133  8B 5D 0C			mov		ebx, [ebp+12]
 00000136  8B 45 08			mov		eax, [ebp+8]
 00000139  89 06			mov		[esi], eax
 0000013B  89 1F			mov		[edi], ebx

					sub		[esi], 4218240
FailedArraySort.asm(238) : error A2070:invalid instruction operands

 0000013D  5D				pop		ebp
 0000013E  C2 0008			ret		8

 00000141			SwitchElements ENDP

				;---------------------------------------------------------
 00000141			PrintMedian PROC
				;
				; 
				; Parameters: +8 is request, +12 is @array
				; Returns: Prints the middle element in the array
				; Preconditions: N/A
				;---------------------------------------------------------

 00000141  55				push	ebp
 00000142  8B EC			mov		ebp, esp

 00000144  8B 45 0C			mov		eax, [ebp+12]				;Getting ready to divide request by 2
 00000147  BB 00000002			mov		ebx, 2
 0000014C  B9 00000000			mov		ecx, 0
 00000151  BA 00000000			mov		edx, 0
 00000156  F7 F3			div		ebx

 00000158  8B C8			mov		ecx, eax

 0000015A				PrintMed:

 0000015A  83 C6 04			add		esi, 4				;Moves to next array node
 0000015D  E2 FB			loop	PrintMed


 0000015F  BA 000000F4 R		mov		edx, OFFSET Median
 00000164  E8 00000000 E		call	WriteString
 00000169  8B 06			mov		eax, [esi]
 0000016B  E8 00000000 E		call	WriteDec
 00000170  E8 00000000 E		call	Crlf

 00000175  5D				pop		ebp
 00000176  C2 0008			ret		8
 00000179			PrintMedian ENDP

				;---------------------------------------------------------
 00000179			PrintArray PROC
				;
				; Prints the content of the array and it's title, sorted or unsorted.
				; Parameters: Sorted character string, value of request, and array address.
				; Returns: None, prints only
				; Preconditions: N/A
				;---------------------------------------------------------

 00000179  55				push	ebp
 0000017A  8B EC			mov		ebp, esp

 0000017C  8B 4D 0C			mov		ecx, [ebp+12]			;+4 is ebp, +8 is title, +12 is request, +16 is @array
 0000017F  8B 75 10			mov		esi, [ebp+16]

 00000182  8B 55 08			mov		edx, [ebp+8]			;Prints Title
 00000185  E8 00000000 E		call	WriteString
 0000018A  E8 00000000 E		call	CrLf

 0000018F  BB 00000000			mov		ebx, 0

 00000194			Printing:

 00000194  8B 06			mov		eax, [esi]
 00000196  E8 00000000 E		call	WriteDec
 0000019B  B0 20			mov		al, ' '
 0000019D  E8 00000000 E		call	WriteChar
 000001A2  E8 00000000 E		call	WriteChar

					
 000001A7  43				inc		ebx
 000001A8  83 FB 0A			cmp		ebx,10
 000001AB  7D 07			jge		PrintNewLine		; ebx used as counter for new lines


 000001AD  83 C6 04			add		esi, 4				;Moves to next array node
 000001B0  E2 E2			loop	Printing

 000001B2  EB 0F			jmp		FinishPrint

 000001B4			PrintNewLine:
					
 000001B4  E8 00000000 E		call	Crlf
 000001B9  83 C6 04			add		esi, 4
 000001BC  BB 00000000			mov		ebx, 0
 000001C1  E2 D1			loop	Printing

 000001C3			FinishPrint:
 000001C3  E8 00000000 E		call	CrLf
 000001C8  E8 00000000 E		call	Crlf
 000001CD  5D				pop		ebp
 000001CE  C2 000C			ret		12
 000001D1			PrintArray ENDP


				END main
Microsoft (R) Macro Assembler Version 14.13.26129.0	    05/24/18 22:24:20
(FailedArraySort    (FailedArraySort.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000438 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001D1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FillArray  . . . . . . . . . . .	P Near	 000000D1 _TEXT	Length= 00000025 Public STDCALL
  AddElement . . . . . . . . . .	L Near	 000000DA _TEXT	
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetUserData  . . . . . . . . . .	P Near	 00000094 _TEXT	Length= 0000003D Public STDCALL
  GetInput . . . . . . . . . . .	L Near	 00000097 _TEXT	
  error  . . . . . . . . . . . .	L Near	 000000C0 _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintArray . . . . . . . . . . .	P Near	 00000179 _TEXT	Length= 00000058 Public STDCALL
  Printing . . . . . . . . . . .	L Near	 00000194 _TEXT	
  PrintNewLine . . . . . . . . .	L Near	 000001B4 _TEXT	
  FinishPrint  . . . . . . . . .	L Near	 000001C3 _TEXT	
PrintMedian  . . . . . . . . . .	P Near	 00000141 _TEXT	Length= 00000038 Public STDCALL
  PrintMed . . . . . . . . . . .	L Near	 0000015A _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SortList . . . . . . . . . . . .	P Near	 000000F6 _TEXT	Length= 00000034 Public STDCALL
  OuterLoop  . . . . . . . . . .	L Near	 00000102 _TEXT	
  InnerLoop  . . . . . . . . . .	L Near	 0000010E _TEXT	
  NoSwitch . . . . . . . . . . .	L Near	 0000011B _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SwitchElements . . . . . . . . .	P Near	 0000012A _TEXT	Length= 00000017 Public STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
introduction . . . . . . . . . .	P Near	 00000075 _TEXT	Length= 0000001F Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000075 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MAX  . . . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 0000000Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
Median . . . . . . . . . . . . .	Byte	 000000F4 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
MyName . . . . . . . . . . . . .	Byte	 00000000 _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ProgTitle  . . . . . . . . . . .	Byte	 00000018 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
Sorted . . . . . . . . . . . . .	Byte	 000000DB _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
Unsorted . . . . . . . . . . . .	Byte	 000000B8 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 00000114 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instruct1  . . . . . . . . . . .	Byte	 0000003B _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineCount  . . . . . . . . . . .	DWord	 00000434 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
request  . . . . . . . . . . . .	DWord	 00000110 _DATA	
warning  . . . . . . . . . . . .	Byte	 00000084 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   1 Errors
